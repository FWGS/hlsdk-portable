#! /usr/bin/env python
# encoding: utf-8
# a1batross, mittorn, 2018

from waflib import Utils
import os

def options(opt):
	return

def configure(conf):
	if conf.env.COMPILER_CC == 'msvc':
		# hl.def removes MSVC function name decoration from GiveFnptrsToDll on Windows.
		# Without this, the lookup for this function fails.
		hlDefNode = conf.path.find_resource("./hl.def")

		if hlDefNode is not None:
			conf.env.append_value('LINKFLAGS', '/def:%s' % hlDefNode.abspath())
		else:
			conf.fatal("Could not find hl.def")

def build(bld):
	excluded_files = ['mpstubb.cpp', 'stats.cpp', 'Wxdebug.cpp', 'egon.cpp', 'handgrenade.cpp', 'hornetgun.cpp', 'python.cpp', 'gauss.cpp', 'glock.cpp', 'mp5.cpp']

	source = bld.path.ant_glob('**/*.cpp', excl=excluded_files)
	source += bld.path.parent.ant_glob(['pm_shared/*.c', 'public/safe_snprintf.c'])

	defines = bld.env.EXPORT_DEFINES_LIST
	if 'HAVE_STRLCPY=1' not in defines:
		source += bld.path.parent.ant_glob('external/openbsd/strlcpy.c')

	if 'HAVE_STRLCAT=1' not in defines:
		source += bld.path.parent.ant_glob('external/openbsd/strlcat.c')

	if bld.env.USE_VOICEMGR:
		source += ['../game_shared/voice_gamemgr.cpp']
	else:
		defines += ['NO_VOICEGAMEMGR']

	includes = [
		'.',
		'../common',
		'../engine',
		'../pm_shared',
		'../game_shared',
		'../public',
		'poke646'
	]

	if bld.env.DEST_OS != 'dos' and not bld.env.ANDROID_APK:
		install_path = os.path.join(bld.env.GAMEDIR, bld.env.SERVER_INSTALL_DIR)
	else:
		install_path = bld.env.PREFIX

	if bld.env.DEST_OS == 'darwin' and bld.env.SERVER_LIBRARY_NAME_OSX:
		# on Apple platforms we always use gamedll_osx liblist/gameinfo key, if it's set
		server_dll_name = bld.env.SERVER_LIBRARY_NAME_OSX
	elif bld.env.DEST_OS != 'win32' and bld.env.SERVER_LIBRARY_NAME_LINUX:
		# on non-Windows platforms we use gamedll_linux liblist/gameinfo key, if it's set
		server_dll_name = bld.env.SERVER_LIBRARY_NAME_LINUX
	else:
		# on Windows or if no gamedll_osx or gamedll_linux is set, use default gamedll key
		server_dll_name = bld.env.SERVER_LIBRARY_NAME

	bld.shlib(
		source   = source,
		target   = server_dll_name + bld.env.POSTFIX,
		name     = 'server',
		features = 'c cxx',
		includes = includes,
		defines  = defines,
		use      = 'vcs_info',
		install_path = install_path,
		idx = bld.get_taskgen_count()
	)

